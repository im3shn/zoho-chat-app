/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;

public class App {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        List<User> users = new ArrayList<>();
        List<Group> groups = new ArrayList<>();

        while (true) {
            System.out.println("-----Enter Task Id------");
            System.out.println("1. Add user");
            System.out.println("2. Print users with id");
            System.out.println("3. send message to a user");
            System.out.println("4. see list of messages from a user");
            System.out.println("5. delete message you sent");
            System.out.println("6. Create a group");
            System.out.println("7. Print list of groups");
            System.out.println("8. Add message to group");
            System.out.println("9. Print Messages from a group");
            System.out.println("-------------------------");
            int task = Integer.parseInt(sc.nextLine());
            switch (task) {
                case 0:
                    sc.close();
                    break;
                case 1:
                    System.out.println("Enter user's name");
                    String name = sc.nextLine();
                    users.add(createUser(name));
                    break;
                case 2:
                    printUsers(users);
                    break;
                case 3:
                    printUsers(users);
                    System.out.println("Enter id");
                    int senderId = Integer.parseInt(sc.nextLine());
                    int receiverId = Integer.parseInt(sc.nextLine());
                    System.out.println("Enter Message");
                    String message = sc.nextLine();
                    sendMessage(users, senderId, receiverId, message);
                    break;
                case 4:
                    System.out.println("Enter your userId");
                    int userId = Integer.parseInt(sc.nextLine());
                    System.out.println("Enter yout contactId");
                    int contactId = Integer.parseInt(sc.nextLine());
                    printUserMessage(users, userId, contactId);
                    ;
                    break;
                case 5:
                    printUsers(users);
                    System.out.println("Enter your user id");
                    userId = Integer.parseInt(sc.nextLine());
                    System.out.println("Enter your target contact id");
                    contactId = Integer.parseInt(sc.nextLine());
                    printUserMessage(users, contactId, userId);
                    System.out.println("Select the message you want to delete");
                    int messageId = Integer.parseInt(sc.nextLine());
                    deleteUserMessage(users, userId, contactId, messageId);
                    printUserMessage(users, contactId, userId);
                    break;
                case 6:
                    System.out.println("Enter group name to create");
                    String groupName = sc.nextLine();
                    createNewGroup(groups, groupName);
                    break;
                case 7:
                    printGroups(groups);
                    break;
                case 8:
                    printUsers(users);
                    System.out.println("Enter userid");
                    userId = Integer.parseInt(sc.nextLine());
                    System.out.println("Enter group id");
                    int groupId = Integer.parseInt(sc.nextLine());
                    System.out.println("Enter message");
                    message = sc.nextLine();
                    addMessageToGroup(users, userId, groups, groupId, message);
                    break;
                case 9:
                    printGroups(groups);
                    groupId = Integer.parseInt(sc.nextLine());
                    printMessagesFromGroup(groups, groupId);
                    break;
            }
        }

    }

    static User createUser(String name) {
        User user = new User();
        user.name = name;
        user.info = new HashMap<>();
        System.out.println(user.name);
        return user;
    }

    static void printUsers(List<User> users) {
        int i = 0;
        System.out.println("Printing users");
        for (User user : users) {
            System.out.println(i + " " + user + " " + user.name);
            i++;
        }
    }

    static void sendMessage(List<User> users, int senderId, int receiverId, String message) {
        User sender = users.get(senderId);
        User receiver = users.get(receiverId);

        if (receiver.info.containsKey(sender.name)) {
            receiver.info.get(sender.name).messages.add(message);
        } else {
            List<String> messages = new ArrayList<>();
            messages.add(message);

            Info info = new Info();
            info.sender = sender.name;
            info.messages = messages;

            receiver.info.put(sender.name, info);
        }
    }

    static void printUserMessage(List<User> users, int userId, int contactId) {
        User user = users.get(userId);
        User contact = users.get(contactId);

        Info info = user.info.get(contact.name);
        System.out.println("Messages from contact.name");

        int i = 0;
        for (String message : info.messages) {
            System.out.println(i + " " + message);
            i++;
        }
    }

    static void deleteUserMessage(List<User> users, int userId, int contactId, int messageId) {
        User user = users.get(userId);
        User contact = users.get(contactId);

        contact.info.get(user.name).messages.remove(messageId);
    }

    static void createNewGroup(List<Group> groups, String name) {
        Group group = new Group();
        group.name = name;
        groups.add(group);
        group.messages = new ArrayList<>();
    }

    static void printGroups(List<Group> groups) {
        int i = 0;
        for (Group group : groups) {
            System.out.println(i + " " + group.name);
            i++;
        }
    }

    static void addMessageToGroup(List<User> users, int userId,
            List<Group> groups, int groupId,
            String message) {
        User user = users.get(userId);
        Group group = groups.get(groupId);
        GroupInfo info = new GroupInfo();
        info.user = user;
        info.message = message;
        group.messages.add(info);
    }

    static void printMessagesFromGroup(List<Group> groups, int groupId) {
        Group group = groups.get(groupId);
        System.out.println("Messages from group -> " + group.name);
        int i = 0;
        for (GroupInfo info : group.messages) {
            System.out.println(i + " " + info.user.name + " " + info.message);
            i++;
        }
    }
}
